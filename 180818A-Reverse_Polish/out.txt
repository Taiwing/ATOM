#include "eval_expr.h"

int greater_prec(char cur, char stack_top)
{
	int op_c;
	int op_st;

	op_c = op(cur);
	op_st = op(stack_top);
	if ((op_c < 2 && op_st < 2) || (op_c > 1 && op_st > 1)
			|| (op_c < 2 && op_st > 1))
		return (0);
	return (1);
}

void del_last(t_intop **op_stack)
{
	t_intop *to_rem;

	to_rem = get_last(*op_stack);
	if (to_rem->daddy)
		to_rem->daddy->junior = 0;
	else
		*op_stack = 0;
	free(to_rem);
}

int eval_expr(char *str)
{
	t_intop *output_q;
	t_intop *op_stack;

	while (*str)
	{
		if (op(*str) == -1 && *str != 32)
			push_intop('.', ft_atoi(&str), &output_q);
		else if (op(*str) > -1 && *str != '(' && *str != ')')
		{
			while (op_stack && greater_prec(*str, get_last(op_stack)->op))
				move_op(&op_stack, &output_q);
			push_intop(*str, 0, &op_stack);
		}
		else if (*str == '(')
			push_intop(*str, 0, &op_stack);
		else if (*str == ')')
		{
			while (get_last(op_stack)->op != '(')
				move_op(&op_stack, &output_q);
			del_last(&op_stack);
		}
	}
	while (op_stack)
		move_op(&op_stack, &output_q);
	return (do_ops(&output_q));
}
#ifndef EVAL_EXPR_H
# define EVAL_EXPR_H

# include "links.h"
# include "utils.h"

int eval_expr(char *str);

#endif
#include "links.h"
#include "opp_func.h"

void push_intop(char c, int nb, t_intop **stack)
{
	t_intop	*new;
	t_intop	*last;

	new = (t_intop *)malloc(sizeof(t_intop));
	new->op = c;
	new->nb = nb;
	new->junior = 0;
	last = get_last(*stack);
	if (last)
	{
		last->junior = new;
		new->daddy = last;
	}
	else
		*stack = new;
}

t_intop *get_last(t_intop *stack)
{
	while (stack && stack->junior)
		stack = stack->junior;
	return (stack);
}
void move_op(t_intop **op_stack, t_intop **output_q)
{
	t_intop *daddy;
	t_intop *to_move;

	daddy = get_last(*output_q);
	to_move = get_last(*op_stack);
	if (daddy)
		daddy->junior = to_move;
	else
			*output_q = to_move;
	if (to_move->daddy)
		to_move->daddy->junior = 0;
	else
		*op_stack = 0;
	to_move->daddy = daddy;
}

int op(char c)
{
	int i;

	i = 0;
	while (g_opptab[i].c != c)
		i++;
	return (i < 5 ? i : -1);
}

int do_ops(t_intop **output_q)
{
	int res;
	t_intop	*ptr;
	t_intop *to_remove;

	ptr = *output_q;
	while (ptr->op == '.' && ptr->junior)
		ptr = ptr->junior;
	if (ptr->op != '.')
	{
		ptr->nb = g_opptab[op(ptr->op)].f(ptr->daddy->daddy->nb, ptr->daddy->nb);
		to_remove = ptr->daddy->daddy;
		ptr->daddy = ptr->daddy->daddy->daddy;
		if (ptr->daddy)
			ptr->daddy->junior = ptr;
		else
			*output_q = ptr;
		free(to_remove->junior);
		free(to_remove);
		return (do_ops(output_q));
	}
	res = ptr->nb;
	free(ptr);
	return (res);
}
#ifndef LINKS_H
# define LINKS_H

# include <stdlib.h>

typedef struct s_intop
{
	char op;
	int nb;
	struct s_intop *daddy;
	struct s_intop *junior;
} t_intop;

void push_intop(char c, int nb, t_intop **stack);
t_intop *get_last(t_intop *stack);
void move_op(t_intop **op_stack, t_intop **output_q);
int op(char c);
int do_ops(t_intop **output_q);

#endif
#include "eval_expr.h"

int main(int ac, char **av)
{
	if (ac > 1)
	{
		ft_putnbr(eval_expr(av[1]));
		ft_putchar('\n');
	}
	return (0);
}
#ifndef OPS_FUNC_H
# define OPS_FUNC_H
# include "ops.h"

typedef struct s_opfunc
{
	char c;
	int (*f)(int, int);
} t_opfunc;

t_opfunc g_opptab[] =
{
	{'+', &ft_add},
	{'-', &ft_sub},
	{'*', &ft_mul},
	{'/', &ft_div},
	{'%', &ft_mod},
	{'.', 0}
};

#endif
#include "ops.h"

int ft_add(int a, int b)
{
  return (a + b);
}

int ft_sub(int a, int b)
{
  return (a - b);
}

int ft_mul(int a, int b)
{
  return (a * b);
}

int ft_div(int a, int b)
{
  return (a / b);
}

int ft_mod(int a, int b)
{
  return (a % b);
}
#ifndef OPS_H
# define OPS_H

int ft_add(int a, int b);
int ft_sub(int a, int b);
int ft_mul(int a, int b);
int ft_div(int a, int b);
int ft_mod(int a, int b);

#endif
#include "utils.h"

void ft_putchar(char c)
{
	write(1, &c, 1);
}

void ft_putnbr(int nb)
{
	if (nb < 0)
		ft_putchar(45);
	if (nb > 9 || nb < -9)
		ft_putnbr(nb < 0 ? nb / -10 : nb / 10);
	ft_putchar(nb < 0 ? ((nb % -10) * -1) + 48 : (nb % 10) + 48);
}

int ft_atoi(char **str)
{
	int nb;
	char *ptr;

	nb = 0;
	ptr = *str;
	while (*ptr > 48 && *ptr < 58)
		nb = (nb * 10) + (*ptr++ - 48);
	*str = ptr;
	return nb;
}
#ifndef UTILS_H
# define UTILS_H

# include <unistd.h>

void ft_putchar(char c);
void ft_putnbr(int nb);
int ft_atoi(char **str);

#endif
