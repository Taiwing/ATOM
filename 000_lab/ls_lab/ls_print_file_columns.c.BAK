/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ls_print_file_columns.c                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yforeau <yforeau@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/01/25 11:03:30 by yforeau           #+#    #+#             */
/*   Updated: 2019/01/25 16:54:26 by yforeau          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <sys/ioctl.h>
#include "lsconfig.h"

/*TODO: rework this to print in order of columns, not lines (FUUUUUUCK)*/

static void	set_columns(t_lsconfig *cfg)
{
	struct winsize	w;
	int				term_width;
	int				total_char;
	int				i;

	ioctl(0, TIOCGSIZE, &w);
	term_width = w.ws_col;
	cfg->lsp.col_w = (cfg->lsp.name_max + 1);
	total_char = cfg->lsp.col_w * cfg->lsp.list_len;
	cfg->lsp.line_c = 1;
	cfg->lsp.line_w = total_char;
	cfg->lsp.col_c = total_char / cfg->lsp.col_w;
	while (cfg->lsp.line_w > term_width && cfg->lsp.col_c > 1)
	{
		++cfg->lsp.line_c;
		cfg->lsp.line_w = (total_char / cfg->lsp.line_c)
			+ ((total_char % cfg->lsp.line_c != 0) * cfg->lsp.col_w);
		cfg->lsp.col_c = cfg->lsp.line_w / cfg->lsp.col_w;
	}
	cfg->lsp.buf = (char **)malloc((cfg->lsp.line_c + 1) * sizeof(char *));
	cfg->lsp.last_word_col = cfg->lsp.list_len % cfg->lsp.col_c;
	i = -1;
	while (++i < cfg->lsp.line_c)
		cfg->lsp.buf[i] = (char *)malloc(cfg->lsp.line_w + 1);
	cfg->lsp.buf[i] = NULL;

	ft_printf("term_width: %d\n", term_width);
	ft_printf("name_max: %d\n", cfg->lsp.name_max);
	ft_printf("list_len: %d\n", cfg->lsp.list_len);
	ft_printf("line_c: %d\n", cfg->lsp.line_c);
	ft_printf("line_w: %d\n", cfg->lsp.line_w);
	ft_printf("col_c: %d\n", cfg->lsp.col_c);
	ft_printf("col_w: %d\n", cfg->lsp.col_w);
	ft_printf("word_count: %d\n", cfg->lsp.word_count);
	ft_printf("col_count: %d\n", cfg->lsp.col_count);
	ft_printf("last_word_col: %d\n", cfg->lsp.last_word_col);
}

static void	print_and_destroy(t_lsprint *p)
{
	int		i;

	ft_printf("%*t%s", p->line_c, p->buf);
	i = -1;
	while (p->buf[++i])
		free(p->buf[i]);
	free(p->buf);
}

void		ls_print_file_columns(t_lsfdata *lsf, t_lsconfig *cfg)
{
	t_lsprint	*p;

	p = &cfg->lsp;
	if (!p->col_c)
		set_columns(cfg);
	--p->list_len;
	/*if is the last word to be printed on a line*/
	if (p->col_count == p->col_c - 1)// || (p->word_count == p->line_c - 1
		//&& p->col_count == p->last_word_col - 1))
		ft_sprintf(p->buf[p->word_count] + (p->col_count * p->col_w),
			"%s\n", lsf->name);
	/*if is inside a line*/
	else
		ft_sprintf(p->buf[p->word_count] + (p->col_count * p->col_w),
			"%-*s", p->col_w, lsf->name);
	/*if is the last word in the list*/
	if (!p->list_len)
		print_and_destroy(p);
	else
	{
		++p->word_count;
		if (p->word_count == p->line_c)
		{
			p->word_count = 0;
			++p->col_count;
		}
	}
}
